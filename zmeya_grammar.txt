PROGRAM ::= DECLARATION* FUNCTION* MAIN
 ASSIGNMENT ::= VARIABLE '=' ( EXPRESION | FUN_CALL )
 ATOMIC ::= ( string | int | float | char | bool )
 BLOCK ::= '{' DECLARATION* CONTENT* '}'
 CONDITION ::= if '(' EXPRESION ')' OBLOCK ( else OBLOCK )?
CONSTANT ::= int.constant | float.constant | T | F
 CONTENT ::= SENTENCE | LOOPS | CONDITION
 DECLARATION ::= VARIABLE ':' ATOMIC ';'
DIMENSIONS ::= '[' positive.int.constant ']' ( '[' positive.int.constant ']' )*
EXPRESION ::= LEVEL3 (( '&&' | '||' ) LEVEL3)*
 FUN_CALL ::= 'id_fun' '(' (EXPRESION ( ',' EXPRESION )*)? ')'
 FUNCTION ::= 'id_fun' ':' (RFUNCTION | VFUNCTION)
LEVEL0 ::= '(' EXPRESION ')' | CONSTANT | VARIABLE
LEVEL1 ::= LEVEL0 (LEVEL1_OPERS LEVEL0 )*
LEVEL1_OPERS ::= ( '*' | '/' | '%')
LEVEL2 ::= LEVEL1 (LEVEL2_OPERS LEVEL1 )*
LEVEL2_OPERS ::= ( '+' | '-')
LEVEL3 ::= LEVEL2 ( LEVEL3_OPERS LEVEL2 )*
LEVEL3_OPERS ::= ( '<=' | '>=' | '<' | '>' | '==' | '!=' )
 LOOPS ::= WHILE | REPEAT
MAIN ::= main RBLOCK
 PARAMETERS ::=  ATOMIC VARIABLE ( ',' ATOMIC VARIABLE )*
 RBLOCK ::= '{' DECLARATION* CONTENT* return EXPRESION ';' '}'
READ ::= read '(' VARIABLE ')'
REPEAT ::= repeat '(' positive.int.constant ')' BLOCK
 RFUNCTION ::= ATOMIC '(' PARAMETERS? ')' RBLOCK
 SENTENCE ::= ( ASSIGNMENT | WRITE | READ | FUN_CALL ) ';'
VARIABLE ::= 'id' DIMENSIONS?
 VFUNCTION ::= 'void' '(' PARAMETERS? ')' BLOCK
WHILE ::= while '(' EXPRESION ')' BLOCK
WRITE ::= write '(' ( EXPRESION | string ) ')'

// C like arrays
