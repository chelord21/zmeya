PROGRAM ::= DECL_KLEEN FUNCTION_KLEEN MAIN
DECL_KLEEN ::= (DECLARATION DECL_KLEEN)?
FUNCTION_KLEEN ::= (FUNCTION FUNCTION_KLEEN)?
ASSIGNMENT ::= ASSIGNATION_VARIABLE '=' EXPRESION
ASSIGNATION_VARIABLE ::= 'id' DIMENSIONS
ATOMIC ::= ( string | int | float | bool )
BLOCK ::= '{' DECL_KLEEN CONTENT_KLEEN '}'
CONDITION ::= 'if' '(' EXPRESION ')' OBLOCK ( 'else' OBLOCK )?
CONSTANT ::= 'int.constant' | 'float.constant' | 'T' | 'F'
CONTENT ::= SENTENCE | LOOPS | CONDITION
CONTENT_KLEEN ::= (CONTENT CONTENT_KLEEN)?
DECLARATION ::= 'VAR' VARIABLE ':' ATOMIC ';'
DIMENSIONS ::= '[' positive.int.constant ']' ( '[' positive.int.constant ']' )*
EXPRESION ::= LEVEL3 (( '&&' | '||' ) LEVEL3)*
FUN_CALL ::= 'id_fun' '(' FUN_CALL_OPTS ')'
FUN_CALL_OPTS ::= EXPRESION (',' EXPRESION)*
FUNCTION ::= 'id_fun' ':' FUNCTION_TYPES
FUNCTION_TYPES ::= RFUNCTION | VFUNCTION
LEVEL0 ::= '(' EXPRESION ')' | CONSTANT | VARIABLE | FUN_CALL
LEVEL1 ::= LEVEL0 (LEVEL1_OPERS LEVEL1 )*
LEVEL1_OPERS ::= ( '*' | '/' | '%')
LEVEL2 ::= LEVEL1 (LEVEL2_OPERS LEVEL2 )*
LEVEL2_OPERS ::= ( '+' | '-')
LEVEL3 ::= LEVEL2 ( LEVEL3_OPERS LEVEL3 )*
LEVEL3_OPERS ::= ( '<=' | '>=' | '<' | '>' | '==' | '!=' )
LOOPS ::= WHILE | REPEAT
MAIN ::= main BLOCK
OBLOCK ::= '{' CONTENT_KLEEN ('return' EXPRESION ';') '}'
OPT_ARRAY ::= DIMENSIONS?
OPT_PARAMS ::= PARAMETERS?
PARAMETERS ::=  ATOMIC VARIABLE PARAMS_LOOP
PARAMS_LOOP ::= (',' PARAMETERS)?
RBLOCK ::= '{' DECL_KLEEN CONTENT_KLEEN 'return' EXPRESION ';' '}'
READ ::= read '(' VARIABLE ')'
REPEAT ::= repeat '(' positive.int.constant ')' BLOCK
RFUNCTION ::= ATOMIC '(' OPT_PARAMS ')' RBLOCK
SENTENCE ::= ( ASSIGNMENT | WRITE | READ | FUN_CALL ) ';'
VARIABLE ::= 'id' OPT_ARRAY
VFUNCTION ::= 'void' '(' OPT_PARAMS ')' BLOCK
VOID_FUN_CALL ::= 'id_fun' '(' FUN_CALL_OPTS ')'
WHILE ::= while '(' EXPRESION ')' BLOCK
WRITE ::= write '(' WRITE_OPT ')'
WRITE_OPT ::= EXPRESION | 'string'

// C like arrays
